(function(i,e){typeof exports=="object"&&typeof module!="undefined"?e(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],e):(i=typeof globalThis!="undefined"?globalThis:i||self,e(i["vue-openweather"]={},i.Vue))})(this,function(i,e){"use strict";const u=(r,c)=>{const a=new Date((r+c)*1e3),l=a.getTime()+a.getTimezoneOffset()*6e4;return new Date(l)},m=(r,c)=>{const a=u(r,c),l=a.toLocaleString("default",{weekday:"long"}),s=a.toLocaleString("default",{month:"long"}),o=a.getDate();return`${l}, ${o} ${s}`},h=(r,c)=>{const a=u(r,c),l=a.getHours(),s=a.getMinutes(),o=l>=12?"pm":"am",t=l==12&&o=="pm"?l:l%12,n=t<10?`0${t}`:t,p=s<10?`0${s}`:s;return`${n}:${p} ${o}`},g=r=>r.join(","),N=async(r,c,a,l="metric",s=["minutely","alerts"])=>{let o;try{o=await(await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${c}&lon=${a}&appid=${r}&units=${l}&exclude=${g(s)}`)).json()}catch(t){console.log(t),o={}}return o};var J="",Q="",y=(r,c)=>{const a=r.__vccOpts||r;for(const[l,s]of c)a[l]=s;return a};const _=r=>(e.pushScopeId("data-v-25526f10"),r=r(),e.popScopeId(),r),E={class:"component"},S={class:"horizontal"},D={style:{"margin-top":"0.25rem"},align:"center"},$={style:{"margin-top":"0.25rem"},align:"center"},x={style:{"margin-top":"0.75rem"},align:"center"},k=_(()=>e.createElementVNode("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},[e.createElementVNode("path",{fill:"currentColor",d:"M19 18H6a4 4 0 0 1-4-4a4 4 0 0 1 4-4h.71C7.37 7.69 9.5 6 12 6a5.5 5.5 0 0 1 5.5 5.5v.5H19a3 3 0 0 1 3 3a3 3 0 0 1-3 3m.35-7.97A7.49 7.49 0 0 0 12 4C9.11 4 6.6 5.64 5.35 8.03A6.004 6.004 0 0 0 0 14a6 6 0 0 0 6 6h13a5 5 0 0 0 5-5c0-2.64-2.05-4.78-4.65-4.97Z"})],-1)),T={class:"center"},B={class:"absolute"},C={class:"relative left-[-50%]"},W=[_(()=>e.createElementVNode("div",{class:"lds-dual-ring"},null,-1))],O={class:"center"},b=["alt","src"],z={style:{"margin-top":"0.25rem"},align:"center"},v={style:{"margin-top":"0.75rem"},align:"center"},L=_(()=>e.createElementVNode("svg",{width:"1em",height:"1em",viewBox:"0 0 24 24"},[e.createElementVNode("path",{fill:"currentColor",d:"M19 18H6a4 4 0 0 1-4-4a4 4 0 0 1 4-4h.71C7.37 7.69 9.5 6 12 6a5.5 5.5 0 0 1 5.5 5.5v.5H19a3 3 0 0 1 3 3a3 3 0 0 1-3 3m.35-7.97A7.49 7.49 0 0 0 12 4C9.11 4 6.6 5.64 5.35 8.03A6.004 6.004 0 0 0 0 14a6 6 0 0 0 6 6h13a5 5 0 0 0 5-5c0-2.64-2.05-4.78-4.65-4.97Z"})],-1)),H={class:"center"},I={class:"absolute"},M={class:"relative left-[-50%]"},j=[_(()=>e.createElementVNode("div",{class:"lds-dual-ring"},null,-1))],A={class:"center"},F=["alt","src"];var V=y(e.defineComponent({props:{apiKey:String,lat:String,long:String,hourly:{type:Boolean,default:!1},daily:{type:Boolean,default:!1},units:{type:String,default:"metric"},excludes:{type:Array,default:["minutely","alerts","current"]}},emits:["weatherData"],setup(r,{emit:c}){const a=r,l=e.ref(!1),s=e.ref(""),o=e.ref(""),t=e.ref(),n=e.ref();return e.watchEffect(async()=>{s.value=`https://api.openweathermap.org/data/2.5/onecall?lat=${a.lat}&lon=${a.long}&appid=${a.apiKey}&units=${a.units}&exclude=${g(a.excludes)}`;try{const p=await fetch(s.value);o.value=await p.json(),t.value=o.value.hourly,n.value=o.value.daily,c("weatherData",[o.value])}catch(p){console.log(p)}}),(p,f)=>(e.openBlock(),e.createElementBlock("div",E,[e.createElementVNode("div",S,[t.value&&a.hourly?(e.openBlock(!0),e.createElementBlock(e.Fragment,{key:0},e.renderList(t.value,d=>(e.openBlock(),e.createElementBlock("div",{class:"card",key:d},[e.createElementVNode("p",D,e.toDisplayString(e.unref(m)(d.dt,o.value.timezone_offset)),1),e.createElementVNode("p",$,e.toDisplayString(e.unref(h)(d.dt,o.value.timezone_offset)),1),e.createElementVNode("p",x,[k,e.createTextVNode(" "+e.toDisplayString(d.clouds)+"% ",1)]),e.createVNode(e.Transition,{appear:""},{default:e.withCtx(()=>[e.createElementVNode("div",T,[e.createElementVNode("div",B,[e.withDirectives(e.createElementVNode("div",C,W,512),[[e.vShow,!l.value]])])])]),_:1}),e.createVNode(e.Transition,null,{default:e.withCtx(()=>[e.withDirectives(e.createElementVNode("div",O,[e.createElementVNode("img",{draggable:"false",onLoad:f[0]||(f[0]=G=>l.value=!0),alt:d.weather[0],src:`https://openweathermap.org/img/wn/${d.weather[0].icon}@2x.png`},null,40,b)],512),[[e.vShow,l.value]])]),_:2},1024)]))),128)):n.value&&a.daily?(e.openBlock(!0),e.createElementBlock(e.Fragment,{key:1},e.renderList(n.value,d=>(e.openBlock(),e.createElementBlock("div",{class:"card",key:d},[e.createElementVNode("p",z,e.toDisplayString(e.unref(m)(d.dt,o.value.timezone_offset)),1),e.createElementVNode("p",v,[L,e.createTextVNode(" "+e.toDisplayString(d.clouds)+"% ",1)]),e.createVNode(e.Transition,{appear:""},{default:e.withCtx(()=>[e.createElementVNode("div",H,[e.createElementVNode("div",I,[e.withDirectives(e.createElementVNode("div",M,j,512),[[e.vShow,!l.value]])])])]),_:1}),e.createVNode(e.Transition,null,{default:e.withCtx(()=>[e.withDirectives(e.createElementVNode("div",A,[e.createElementVNode("img",{draggable:"false",onLoad:f[1]||(f[1]=G=>l.value=!0),alt:d.weather[0],src:`https://openweathermap.org/img/wn/${d.weather[0].icon}@2x.png`},null,40,F)],512),[[e.vShow,l.value]])]),_:2},1024)]))),128)):e.createCommentVNode("",!0)])]))}}),[["__scopeId","data-v-25526f10"]]),ee="";const K={key:0,class:"component card",style:{"padding-left":"15px","padding-bottom":"20px"}},P={style:{display:"flex"}},Z=["alt","src"],q={class:"grid-container"};var w=y(e.defineComponent({props:{apiKey:String,lat:String,long:String,units:{type:String,default:"metric"}},emits:["currentWeather"],setup(r,{emit:c}){const a=r,l=e.ref(!0),s=n=>{if(n>=22.5&&n<67.5)return"NE";if(n>=67.5&&n<112.5)return"E";if(n>=112.5&&n<157.5)return"SE";if(n>=157.5&&n<202.5)return"S";if(n>=202.5&&n<247.5)return"SW";if(n>=247.5&&n<292.5)return"W";if(n>=292.5&&n<337.5)return"NW";if(n>=337.5||n<22.5)return"N"},o=e.ref(),t=e.ref();return e.watchEffect(async()=>{try{console.log(l.value);const n=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${a.lat}&lon=${a.long}&appid=${a.apiKey}&units=${a.units}&exclude=minutely,alerts,hourly,daily`);o.value=await n.json(),t.value=o.value.current,m(t.value.dt,o.value.timezone_offset),c("currentWeather",[o.value])}catch(n){console.log(n)}}),setInterval(()=>{l.value=!l.value},(120-new Date().getSeconds())*1e3),(n,p)=>t.value?(e.openBlock(),e.createElementBlock("div",K,[e.createElementVNode("h1",null,e.toDisplayString(e.unref(m)(t.value.dt,o.value.timezone_offset))+", "+e.toDisplayString(e.unref(h)(t.value.dt,o.value.timezone_offset)),1),e.createElementVNode("div",P,[e.createTextVNode(e.toDisplayString(t.value.weather[0].description)+" ",1),e.createElementVNode("img",{draggable:"false",alt:t.value.weather[0],src:`https://openweathermap.org/img/wn/${t.value.weather[0].icon}@2x.png`},null,8,Z)]),e.createElementVNode("div",q,[e.createElementVNode("div",null," Cloud Cover "+e.toDisplayString(t.value.clouds)+"% ",1),e.createElementVNode("div",null," Humidity "+e.toDisplayString(t.value.humidity)+"% ",1),e.createElementVNode("div",null," Pressure "+e.toDisplayString(t.value.pressure)+"hPa ",1),e.createElementVNode("div",null," Temperature "+e.toDisplayString(t.value.temp)+"\xB0C ",1),e.createElementVNode("div",null," Feels Like "+e.toDisplayString(t.value.feels_like)+"\xB0C ",1),e.createElementVNode("div",null," Dew Point "+e.toDisplayString(t.value.dew_point)+"\xB0C ",1),e.createElementVNode("div",null,e.toDisplayString(t.value.wind_speed)+"m/s "+e.toDisplayString(s(t.value.wind_deg)),1),e.createElementVNode("div",null," Visibility "+e.toDisplayString((t.value.visibility/1e3).toFixed(2))+"km ",1),e.createElementVNode("div",null," UV Index "+e.toDisplayString(t.value.uvi),1),e.createElementVNode("div",null," Sunrise "+e.toDisplayString(e.unref(h)(t.value.sunrise,o.value.timezone_offset)),1),e.createElementVNode("div",null," Sunset "+e.toDisplayString(e.unref(h)(t.value.sunset,o.value.timezone_offset)),1)])])):e.createCommentVNode("",!0)}}),[["__scopeId","data-v-c0093f52"]]);const U={install:r=>{r.component("VueOpenWeather",V),r.component("VueCurrentWeather",w)}};i.OpenWeather=U,i.VueCurrentWeather=w,i.VueOpenWeather=V,i.convertTimeZone=u,i.getWeather=N,i.utcToDate=m,i.utcToTime=h,Object.defineProperties(i,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
