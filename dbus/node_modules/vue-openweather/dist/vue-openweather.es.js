import { defineComponent, ref, watchEffect, openBlock, createElementBlock, createElementVNode, Fragment, renderList, toDisplayString, unref, createTextVNode, createVNode, Transition, withCtx, withDirectives, vShow, createCommentVNode, pushScopeId, popScopeId } from "vue";
const convertTimeZone = (time, offset) => {
  const date = new Date((time + offset) * 1e3);
  const utc = date.getTime() + date.getTimezoneOffset() * 6e4;
  const nd = new Date(utc);
  return nd;
};
const utcToDate = (time, offset) => {
  const date = convertTimeZone(time, offset);
  const day = date.toLocaleString("default", { weekday: "long" });
  const month = date.toLocaleString("default", { month: "long" });
  const dayOfMonth = date.getDate();
  return `${day}, ${dayOfMonth} ${month}`;
};
const utcToTime = (time, offset) => {
  const date = convertTimeZone(time, offset);
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const ampm = hours >= 12 ? "pm" : "am";
  const hour = hours == 12 && ampm == "pm" ? hours : hours % 12;
  const formattedHour = hour < 10 ? `0${hour}` : hour;
  const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
  return `${formattedHour}:${formattedMinutes} ${ampm}`;
};
const excludeString = (excludes) => {
  return excludes.join(",");
};
const getWeather = async (apiKey, lat, lon, units = "metric", excludes = ["minutely", "alerts"]) => {
  let data;
  try {
    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=${units}&exclude=${excludeString(excludes)}`);
    data = await response.json();
  } catch (error) {
    console.log(error);
    data = {};
  }
  return data;
};
var VueOpenWeather_vue_vue_type_style_index_0_lang = "";
var VueOpenWeather_vue_vue_type_style_index_1_scoped_true_lang = "";
var _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _withScopeId = (n) => (pushScopeId("data-v-25526f10"), n = n(), popScopeId(), n);
const _hoisted_1$1 = { class: "component" };
const _hoisted_2$1 = { class: "horizontal" };
const _hoisted_3$1 = {
  style: { "margin-top": "0.25rem" },
  align: "center"
};
const _hoisted_4$1 = {
  style: { "margin-top": "0.25rem" },
  align: "center"
};
const _hoisted_5 = {
  style: { "margin-top": "0.75rem" },
  align: "center"
};
const _hoisted_6 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createElementVNode("svg", {
  width: "1em",
  height: "1em",
  viewBox: "0 0 24 24"
}, [
  /* @__PURE__ */ createElementVNode("path", {
    fill: "currentColor",
    d: "M19 18H6a4 4 0 0 1-4-4a4 4 0 0 1 4-4h.71C7.37 7.69 9.5 6 12 6a5.5 5.5 0 0 1 5.5 5.5v.5H19a3 3 0 0 1 3 3a3 3 0 0 1-3 3m.35-7.97A7.49 7.49 0 0 0 12 4C9.11 4 6.6 5.64 5.35 8.03A6.004 6.004 0 0 0 0 14a6 6 0 0 0 6 6h13a5 5 0 0 0 5-5c0-2.64-2.05-4.78-4.65-4.97Z"
  })
], -1));
const _hoisted_7 = { class: "center" };
const _hoisted_8 = { class: "absolute" };
const _hoisted_9 = { class: "relative left-[-50%]" };
const _hoisted_10 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createElementVNode("div", { class: "lds-dual-ring" }, null, -1));
const _hoisted_11 = [
  _hoisted_10
];
const _hoisted_12 = { class: "center" };
const _hoisted_13 = ["alt", "src"];
const _hoisted_14 = {
  style: { "margin-top": "0.25rem" },
  align: "center"
};
const _hoisted_15 = {
  style: { "margin-top": "0.75rem" },
  align: "center"
};
const _hoisted_16 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createElementVNode("svg", {
  width: "1em",
  height: "1em",
  viewBox: "0 0 24 24"
}, [
  /* @__PURE__ */ createElementVNode("path", {
    fill: "currentColor",
    d: "M19 18H6a4 4 0 0 1-4-4a4 4 0 0 1 4-4h.71C7.37 7.69 9.5 6 12 6a5.5 5.5 0 0 1 5.5 5.5v.5H19a3 3 0 0 1 3 3a3 3 0 0 1-3 3m.35-7.97A7.49 7.49 0 0 0 12 4C9.11 4 6.6 5.64 5.35 8.03A6.004 6.004 0 0 0 0 14a6 6 0 0 0 6 6h13a5 5 0 0 0 5-5c0-2.64-2.05-4.78-4.65-4.97Z"
  })
], -1));
const _hoisted_17 = { class: "center" };
const _hoisted_18 = { class: "absolute" };
const _hoisted_19 = { class: "relative left-[-50%]" };
const _hoisted_20 = /* @__PURE__ */ _withScopeId(() => /* @__PURE__ */ createElementVNode("div", { class: "lds-dual-ring" }, null, -1));
const _hoisted_21 = [
  _hoisted_20
];
const _hoisted_22 = { class: "center" };
const _hoisted_23 = ["alt", "src"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  props: {
    "apiKey": String,
    "lat": String,
    "long": String,
    "hourly": {
      type: Boolean,
      default: false
    },
    "daily": {
      type: Boolean,
      default: false
    },
    "units": {
      type: String,
      default: "metric"
    },
    "excludes": {
      type: Array,
      default: ["minutely", "alerts", "current"]
    }
  },
  emits: ["weatherData"],
  setup(__props, { emit: emits }) {
    const props = __props;
    const isLoaded = ref(false);
    const apiLink = ref("");
    const weather = ref("");
    const hourly = ref();
    const daily = ref();
    watchEffect(async () => {
      apiLink.value = `https://api.openweathermap.org/data/2.5/onecall?lat=${props.lat}&lon=${props.long}&appid=${props.apiKey}&units=${props.units}&exclude=${excludeString(props.excludes)}`;
      try {
        const weatherData = await fetch(apiLink.value);
        weather.value = await weatherData.json();
        hourly.value = weather.value.hourly;
        daily.value = weather.value.daily;
        emits("weatherData", [weather.value]);
      } catch (error) {
        console.log(error);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$1, [
        createElementVNode("div", _hoisted_2$1, [
          hourly.value && props.hourly ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(hourly.value, (condition) => {
            return openBlock(), createElementBlock("div", {
              class: "card",
              key: condition
            }, [
              createElementVNode("p", _hoisted_3$1, toDisplayString(unref(utcToDate)(condition.dt, weather.value.timezone_offset)), 1),
              createElementVNode("p", _hoisted_4$1, toDisplayString(unref(utcToTime)(condition.dt, weather.value.timezone_offset)), 1),
              createElementVNode("p", _hoisted_5, [
                _hoisted_6,
                createTextVNode(" " + toDisplayString(condition.clouds) + "% ", 1)
              ]),
              createVNode(Transition, { appear: "" }, {
                default: withCtx(() => [
                  createElementVNode("div", _hoisted_7, [
                    createElementVNode("div", _hoisted_8, [
                      withDirectives(createElementVNode("div", _hoisted_9, _hoisted_11, 512), [
                        [vShow, !isLoaded.value]
                      ])
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(Transition, null, {
                default: withCtx(() => [
                  withDirectives(createElementVNode("div", _hoisted_12, [
                    createElementVNode("img", {
                      draggable: "false",
                      onLoad: _cache[0] || (_cache[0] = ($event) => isLoaded.value = true),
                      alt: condition.weather[0],
                      src: `https://openweathermap.org/img/wn/${condition.weather[0].icon}@2x.png`
                    }, null, 40, _hoisted_13)
                  ], 512), [
                    [vShow, isLoaded.value]
                  ])
                ]),
                _: 2
              }, 1024)
            ]);
          }), 128)) : daily.value && props.daily ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(daily.value, (dailyCond) => {
            return openBlock(), createElementBlock("div", {
              class: "card",
              key: dailyCond
            }, [
              createElementVNode("p", _hoisted_14, toDisplayString(unref(utcToDate)(dailyCond.dt, weather.value.timezone_offset)), 1),
              createElementVNode("p", _hoisted_15, [
                _hoisted_16,
                createTextVNode(" " + toDisplayString(dailyCond.clouds) + "% ", 1)
              ]),
              createVNode(Transition, { appear: "" }, {
                default: withCtx(() => [
                  createElementVNode("div", _hoisted_17, [
                    createElementVNode("div", _hoisted_18, [
                      withDirectives(createElementVNode("div", _hoisted_19, _hoisted_21, 512), [
                        [vShow, !isLoaded.value]
                      ])
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(Transition, null, {
                default: withCtx(() => [
                  withDirectives(createElementVNode("div", _hoisted_22, [
                    createElementVNode("img", {
                      draggable: "false",
                      onLoad: _cache[1] || (_cache[1] = ($event) => isLoaded.value = true),
                      alt: dailyCond.weather[0],
                      src: `https://openweathermap.org/img/wn/${dailyCond.weather[0].icon}@2x.png`
                    }, null, 40, _hoisted_23)
                  ], 512), [
                    [vShow, isLoaded.value]
                  ])
                ]),
                _: 2
              }, 1024)
            ]);
          }), 128)) : createCommentVNode("", true)
        ])
      ]);
    };
  }
});
var VueOpenWeather = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-25526f10"]]);
var VueCurrentWeather_vue_vue_type_style_index_0_scoped_true_lang = "";
const _hoisted_1 = {
  key: 0,
  class: "component card",
  style: { "padding-left": "15px", "padding-bottom": "20px" }
};
const _hoisted_2 = { style: { "display": "flex" } };
const _hoisted_3 = ["alt", "src"];
const _hoisted_4 = { class: "grid-container" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  props: {
    "apiKey": String,
    "lat": String,
    "long": String,
    "units": {
      type: String,
      default: "metric"
    }
  },
  emits: ["currentWeather"],
  setup(__props, { emit: emits }) {
    const props = __props;
    const update = ref(true);
    const convertDirection = (angle) => {
      if (angle >= 22.5 && angle < 67.5) {
        return "NE";
      } else if (angle >= 67.5 && angle < 112.5) {
        return "E";
      } else if (angle >= 112.5 && angle < 157.5) {
        return "SE";
      } else if (angle >= 157.5 && angle < 202.5) {
        return "S";
      } else if (angle >= 202.5 && angle < 247.5) {
        return "SW";
      } else if (angle >= 247.5 && angle < 292.5) {
        return "W";
      } else if (angle >= 292.5 && angle < 337.5) {
        return "NW";
      } else if (angle >= 337.5 || angle < 22.5) {
        return "N";
      }
    };
    const weather = ref();
    const currentWeather = ref();
    watchEffect(async () => {
      try {
        console.log(update.value);
        const weatherData = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${props.lat}&lon=${props.long}&appid=${props.apiKey}&units=${props.units}&exclude=minutely,alerts,hourly,daily`);
        weather.value = await weatherData.json();
        currentWeather.value = weather.value.current;
        utcToDate(currentWeather.value.dt, weather.value.timezone_offset);
        emits("currentWeather", [weather.value]);
      } catch (error) {
        console.log(error);
      }
    });
    setInterval(() => {
      update.value = !update.value;
    }, (120 - new Date().getSeconds()) * 1e3);
    return (_ctx, _cache) => {
      return currentWeather.value ? (openBlock(), createElementBlock("div", _hoisted_1, [
        createElementVNode("h1", null, toDisplayString(unref(utcToDate)(currentWeather.value.dt, weather.value.timezone_offset)) + ", " + toDisplayString(unref(utcToTime)(currentWeather.value.dt, weather.value.timezone_offset)), 1),
        createElementVNode("div", _hoisted_2, [
          createTextVNode(toDisplayString(currentWeather.value.weather[0].description) + " ", 1),
          createElementVNode("img", {
            draggable: "false",
            alt: currentWeather.value.weather[0],
            src: `https://openweathermap.org/img/wn/${currentWeather.value.weather[0].icon}@2x.png`
          }, null, 8, _hoisted_3)
        ]),
        createElementVNode("div", _hoisted_4, [
          createElementVNode("div", null, " Cloud Cover " + toDisplayString(currentWeather.value.clouds) + "% ", 1),
          createElementVNode("div", null, " Humidity " + toDisplayString(currentWeather.value.humidity) + "% ", 1),
          createElementVNode("div", null, " Pressure " + toDisplayString(currentWeather.value.pressure) + "hPa ", 1),
          createElementVNode("div", null, " Temperature " + toDisplayString(currentWeather.value.temp) + "\xB0C ", 1),
          createElementVNode("div", null, " Feels Like " + toDisplayString(currentWeather.value.feels_like) + "\xB0C ", 1),
          createElementVNode("div", null, " Dew Point " + toDisplayString(currentWeather.value.dew_point) + "\xB0C ", 1),
          createElementVNode("div", null, toDisplayString(currentWeather.value.wind_speed) + "m/s " + toDisplayString(convertDirection(currentWeather.value.wind_deg)), 1),
          createElementVNode("div", null, " Visibility " + toDisplayString((currentWeather.value.visibility / 1e3).toFixed(2)) + "km ", 1),
          createElementVNode("div", null, " UV Index " + toDisplayString(currentWeather.value.uvi), 1),
          createElementVNode("div", null, " Sunrise " + toDisplayString(unref(utcToTime)(currentWeather.value.sunrise, weather.value.timezone_offset)), 1),
          createElementVNode("div", null, " Sunset " + toDisplayString(unref(utcToTime)(currentWeather.value.sunset, weather.value.timezone_offset)), 1)
        ])
      ])) : createCommentVNode("", true);
    };
  }
});
var VueCurrentWeather = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-c0093f52"]]);
const OpenWeather = {
  install: (app) => {
    app.component("VueOpenWeather", VueOpenWeather);
    app.component("VueCurrentWeather", VueCurrentWeather);
  }
};
export { OpenWeather, VueCurrentWeather, VueOpenWeather, convertTimeZone, getWeather, utcToDate, utcToTime };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
